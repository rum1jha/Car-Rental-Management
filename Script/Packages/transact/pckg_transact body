--------------------------------------------------------
--  File created - Tuesday-December-14-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Package Body PCKG_TRANSACT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ADMIN"."PCKG_TRANSACT" AS

  FUNCTION PROCESS_DISCOUNTS(
        vDESCRIPTION IN DISCOUNTS.DESCRIPTION%TYPE, 
        vPERCENTAGE IN DISCOUNTS.PERCENTAGE%TYPE 
    )RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_TRANSACT.PROCESS_DISCOUNTS
        ex_INVALID_DESCRIPTION EXCEPTION;
        ex_INVALID_PERCENTAGE EXCEPTION;
    
    BEGIN
    
        IF LENGTH(TRIM(vDESCRIPTION)) > 100 THEN
            RAISE ex_INVALID_DESCRIPTION;
        END IF;
        
        IF vPERCENTAGE > 100 OR vPERCENTAGE < 0 THEN
            RAISE ex_INVALID_PERCENTAGE;
        END IF;
        
        RETURN 'YES';
    
    EXCEPTION
        when ex_INVALID_DESCRIPTION then
            dbms_output.put_line('Please enter the Description within 100 characters !!!');
            RETURN 'NO';

        when ex_INVALID_PERCENTAGE then
            dbms_output.put_line('Please enter the Percentage value between 0 and 100 !!!');
            RETURN 'NO';
            
        RETURN 'NO';
  END PROCESS_DISCOUNTS;

  FUNCTION PROCESS_PAYMENTS(
        vPAY_DATE IN PAYMENTS.PAY_DATE%TYPE, 
        vCUSTOMER_CARD IN PAYMENTS.CUSTOMER_CARD%TYPE, 
        vSTATUS IN PAYMENTS.STATUS%TYPE, 
        vTRANS_ID IN PAYMENTS.TRANS_ID%TYPE, 
        vDISCOUNT_ID IN PAYMENTS.DISCOUNT_ID%TYPE 
    )RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_TRANSACT.PROCESS_PAYMENTS
        DB_vDISCOUNT_ID PAYMENTS.DISCOUNT_ID%TYPE;
        DB_vTRANS_ID PAYMENTS.TRANS_ID%TYPE;
        DB_vPAY_DATE PAYMENTS.PAY_DATE%TYPE; 
        DB_vRIDE_STATUS  RIDE_TRANSACTION.STATUS%type;
        
        ex_INVALID_TRANSACTIONS EXCEPTION;
        ex_INVALID_PAY_DATE EXCEPTION;
        ex_INVALID_CUSTOMER_CARD EXCEPTION;
        ex_INVALID_STATUS EXCEPTION;
        ex_INVALID_TRANS_ID EXCEPTION;
        ex_INVALID_DISCOUNT_ID EXCEPTION;
        ex_INVALID_TRANSACTION EXCEPTION;
        
    BEGIN
        
        IF vTRANS_ID IS NULL OR LENGTH(TRIM(vTRANS_ID)) IS NULL THEN
            raise ex_INVALID_TRANS_ID;
        END IF;
        
        IF PCKG_UTILS.CHECK_TRANS_ID_EXISTS(vTRANS_ID) = 0 THEN
            raise ex_INVALID_TRANS_ID;
        END IF;
        
        begin
            select end_time, status into DB_vPAY_DATE, DB_vRIDE_STATUS  from ride_transaction where trans_id = vTRANS_ID;
            if DB_vPAY_DATE > vPAY_DATE and DB_vRIDE_STATUS != 'COMPLETED' then
                raise ex_INVALID_PAY_DATE;
            end if;
        exception
            when no_data_found then
                raise ex_INVALID_TRANSACTION; 
            when others then
                raise ex_INVALID_TRANSACTION;
        end;
        
        IF LENGTH(TRIM(vCUSTOMER_CARD)) != 19 or vCUSTOMER_CARD IS NULL then
            raise ex_INVALID_CUSTOMER_CARD;
        END IF;
        
        IF vSTATUS != 'IN PROCESS' THEN
            raise ex_INVALID_STATUS;
        END IF;
        
    
        begin
            IF LENGTH(TRIM(vDISCOUNT_ID)) > 0 and vDISCOUNT_ID IS NOT NULL then
                select DISCOUNT_ID into DB_vDISCOUNT_ID from DISCOUNTS where DISCOUNT_ID = vDISCOUNT_ID;
                if DB_vDISCOUNT_ID IS NULL then
                    raise ex_INVALID_DISCOUNT_ID;
                end if;
            end if;
        exception
            when NO_DATA_FOUND then
                dbms_output.put_line('DISCOUNT_ID does not exists in DISCOUNTS table !!!');
                raise ex_INVALID_DISCOUNT_ID;
        end;
        
       
        RETURN 'YES';
        
    EXCEPTION
        
        when ex_INVALID_TRANSACTIONS then
            dbms_output.put_line('Duplicate Transaction occured. Transaction ID should unique !!!');
            RETURN 'NO';
            
        when ex_INVALID_PAY_DATE then
            dbms_output.put_line('Pay Date is not valid. It should not be less than the Ride completed time !!!');
            RETURN 'NO';
        
        when ex_INVALID_CUSTOMER_CARD then
            dbms_output.put_line('Customer Card is not valid. Please check valid 16 digit card number !!!');
            RETURN 'NO';
            
        when ex_INVALID_STATUS then
            dbms_output.put_line('Transaction Status is not yet completed, Payment status cannot be changed !!!');
            RETURN 'NO';
            
        when ex_INVALID_TRANS_ID then
            dbms_output.put_line('Trans_ID is not valid. Please check !!!');
            RETURN 'NO';
        
        when ex_INVALID_TRANSACTION then
            dbms_output.put_line('Invalid Transaction ID !!!');
            RETURN 'NO';       
            
        when ex_INVALID_DISCOUNT_ID then
            dbms_output.put_line('Discount_ID is not valid. Please check !!!');
            RETURN 'NO';
        
        when others then
            return 'NO';
    
        RETURN 'NO';

  END PROCESS_PAYMENTS;

  FUNCTION PROCESS_RIDE_TRANSACTION 
    (
        vTRANS_ID IN RIDE_TRANSACTION.TRANS_ID%type,
        vCUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%type,
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vSTART_TIME IN RIDE_TRANSACTION.START_TIME%type,
        vEND_TIME IN RIDE_TRANSACTION.END_TIME%type,
        vCAR_ID IN CAR.CAR_ID%type,
        vDISTANCE IN RIDE_TRANSACTION.DISTANCE%type,
        vSTATUS IN RIDE_TRANSACTION.STATUS%type 
    ) RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_TRANSACT.PROCESS_RIDE_TRANSACTION
        ex_TRANS_ID_EXISTS EXCEPTION;
        ex_CUSTOMER_ID_NOT_EXISTS EXCEPTION;
        ex_CARS_AT_PICKUP_ID_NOT_EXISTS EXCEPTION;
        ex_INVALID_START_DATE EXCEPTION;
        ex_CAR_ID_NOT_EXISTS EXCEPTION;
        ex_INVALID_DISTANCE EXCEPTION;
        ex_INVALID_STATUS EXCEPTION;
        ex_CAR_ID_NULL EXCEPTION;
    BEGIN
    
        if PCKG_UTILS.CHECK_trans_id_exists(vTRANS_ID) != 0  then
            raise ex_TRANS_ID_EXISTS;
        end if;
        
        if PCKG_UTILS.CHECK_customer_id_exists(vCUSTOMER_ID) = 0 then
            raise ex_CUSTOMER_ID_NOT_EXISTS;
        end if;
    
        if PCKG_UTILS.CHECK_car_at_pickup_id_exists(vCARS_AT_PICKUP_ID) = 0 then
            raise ex_CARS_AT_PICKUP_ID_NOT_EXISTS;
        end if;
        
        if vCAR_ID is NULL then
            raise ex_CAR_ID_NULL;
        end if;
        
        if PCKG_UTILS.CHECK_car_id_exists(vCAR_ID) = 0 then
            raise ex_CAR_ID_NOT_EXISTS;
        end if;
        
        if vSTART_TIME is NULL or vEND_TIME is NULL then
            raise ex_INVALID_START_DATE;
        end if;
        
        if (vSTART_TIME < (sysdate)) or 
        (vEND_TIME < (sysdate)) or 
        (vSTART_TIME > vEND_TIME) then
            raise ex_INVALID_START_DATE;
        end if;
                
        if vDISTANCE != 0 or vDISTANCE is NULL then
            raise ex_INVALID_DISTANCE;
        end if;
        
        if vSTATUS IN ('COMPLETED', 'CANCELLED', 'UPDATED') or vSTATUS != 'IN PROCESS' then
            raise ex_INVALID_STATUS;
        end if;
        
        RETURN 'YES';    
    EXCEPTION
        when ex_CUSTOMER_ID_NOT_EXISTS then
            dbms_output.put_line('Customer Id Not Found!!! Cant Process Transaction');
            RETURN 'NO';
        when ex_CARS_AT_PICKUP_ID_NOT_EXISTS then
            dbms_output.put_line('Car At Pickup Id Not Found!!! Cant Process Transaction');
            RETURN 'NO';
        when ex_TRANS_ID_EXISTS then
            dbms_output.put_line('Duplicate Transaction Id Found!!! Cant Process Transaction');
            RETURN 'NO';
        when ex_INVALID_START_DATE then
            dbms_output.put_line('Invalid Start / End DateTime!!! Cant Process Transaction');
            RETURN 'NO';
        when ex_CAR_ID_NOT_EXISTS then
            dbms_output.put_line('Car Id Not Found!!! Cant Process Transaction');
            RETURN 'NO';
        when ex_INVALID_DISTANCE then
            dbms_output.put_line('Invalid Distance !!! Distance Must Be Zero Before Ride Ends');
            RETURN 'NO';
        when ex_INVALID_STATUS then
            dbms_output.put_line('Invalid Status !!! Status Should Be "IN PROCESS" Only');
            RETURN 'NO';
        when ex_CAR_ID_NULL then
            dbms_output.put_line('Car Id Cannot Be NULL!!! Cant Process Transaction');
            RETURN 'NO';
        when others then
            dbms_output.put_line('otehrs');
            RETURN 'NO';

  END PROCESS_RIDE_TRANSACTION;

  FUNCTION PROCESS_UPDATE_RIDE_TRANSACTION(
        vTRANS_ID IN RIDE_TRANSACTION.TRANS_ID%type,
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vSTART_TIME IN RIDE_TRANSACTION.START_TIME%type,
        vEND_TIME IN RIDE_TRANSACTION.END_TIME%type,
        vCAR_ID IN CAR.CAR_ID%type,
        vDISTANCE IN RIDE_TRANSACTION.DISTANCE%type,
        vSTATUS IN RIDE_TRANSACTION.STATUS%type 
    ) RETURN VARCHAR2 AS
    -- TODO: Implementation required for FUNCTION PCKG_TRANSACT.PROCESS_UPDATE_RIDE_TRANSACTION
        ex_NO_TRANS_ID_FOUND EXCEPTION;
        ex_NO_CARS_AT_PICKUP_ID_FOUND EXCEPTION;
        ex_INVALID_START_DATE EXCEPTION;
        ex_CAR_ID_NOT_EXISTS EXCEPTION;
        ex_INVALID_DISTANCE EXCEPTION;
        ex_INVALID_STATUS EXCEPTION;
        ex_CAR_ID_NULL EXCEPTION;
    BEGIN
        
        if PCKG_UTILS.CHECK_trans_id_exists(vTRANS_ID) = 0 then
            raise ex_NO_TRANS_ID_FOUND;
        end if;
        
        if PCKG_UTILS.CHECK_car_at_pickup_id_exists(vCARS_AT_PICKUP_ID) = 0 then
            raise ex_NO_CARS_AT_PICKUP_ID_FOUND;
        end if;
        
        if vCAR_ID is NULL then
            raise ex_CAR_ID_NULL;
        end if;
        if PCKG_UTILS.CHECK_car_id_exists(vCAR_ID) = 0 then
            raise ex_CAR_ID_NOT_EXISTS;
        end if;
            
        if vSTATUS NOT IN ('COMPLETED', 'CANCELLED', 'UPDATED') or vSTATUS = 'IN PROCESS' then
            raise ex_INVALID_STATUS;
        else
            if vSTATUS != 'COMPLETED' and (vDISTANCE != 0 or vDISTANCE is NULL) then
                raise ex_INVALID_DISTANCE;
            end if;
        end if;
            
        if (vSTART_TIME < sysdate) or 
        (vEND_TIME < sysdate) or 
        (vSTART_TIME > vEND_TIME) then
            raise ex_INVALID_START_DATE;
        end if;
        
        RETURN 'YES';
    EXCEPTION
    
        when ex_NO_TRANS_ID_FOUND then
            dbms_output.put_line('No Transaction Found!!! Update Failed');
            RETURN 'NO';
        when ex_NO_CARS_AT_PICKUP_ID_FOUND then
            dbms_output.put_line('No CARS AT PICKUP ID Found!!! Update Failed');
            RETURN 'NO';
        when ex_INVALID_START_DATE then
            dbms_output.put_line('Invalid Start / End DateTime!!! Update Failed');
            RETURN 'NO';
        when ex_CAR_ID_NOT_EXISTS then
            dbms_output.put_line('Car Id Not Found!!! Update Failed');
            RETURN 'NO';
        when ex_INVALID_DISTANCE then
            dbms_output.put_line('Invalid Distance !!! Distance Must Be Zero Before Ride Ends');
            RETURN 'NO';
        when ex_INVALID_STATUS then
            dbms_output.put_line('Invalid Status!!!');
            RETURN 'NO';
        when ex_CAR_ID_NULL then
            dbms_output.put_line('Car Id Cannot Be NULL!!! Cant Process Transaction');
            RETURN 'NO';
        when others then
            RETURN 'NO';

  END PROCESS_UPDATE_RIDE_TRANSACTION;

  PROCEDURE INSERT_RIDE_TRANSACTION(
        vTRANS_ID IN RIDE_TRANSACTION.TRANS_ID%type,
        vCUSTOMER_ID IN CUSTOMERS.CUSTOMER_ID%type,
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vSTART_TIME IN RIDE_TRANSACTION.START_TIME%type,
        vEND_TIME IN RIDE_TRANSACTION.END_TIME%type,
        vCAR_ID IN CAR.CAR_ID%type,
        vDISTANCE IN RIDE_TRANSACTION.DISTANCE%type,
        vSTATUS IN RIDE_TRANSACTION.STATUS%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.INSERT_RIDE_TRANSACTION
        ex_INVALID EXCEPTION;
        ex_CAR_NOT_AVAILABLE EXCEPTION;
    BEGIN
        if process_ride_transaction(vTRANS_ID, vCUSTOMER_ID, vCARS_AT_PICKUP_ID,
        vSTART_TIME, vEND_TIME, vCAR_ID, vDISTANCE, vSTATUS) = 'NO' then
            raise ex_INVALID;
        end if;
    
        if PCKG_UTILS.CHECK_CAR_AVAILABILITY(vCAR_ID, vSTART_TIME, vEND_TIME) != 0 then
            raise ex_CAR_NOT_AVAILABLE;
        end if;
        
        insert into RIDE_TRANSACTION values(
            vTRANS_ID,
            vCUSTOMER_ID,
            vCARS_AT_PICKUP_ID,
            sysdate,
            vSTART_TIME,
            vEND_TIME,
            vCAR_ID,
            vDISTANCE,
            vSTATUS
        );
        
        if SQL%ROWCOUNT != 1 then
            rollback;
            raise ex_INVALID;
        else
            dbms_output.put_line('Ride Scheduled Successfuly !!!');
        end if;
        
        commit;
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Ride Transaction Failed !!!');
        when ex_CAR_NOT_AVAILABLE then
            dbms_output.put_line('This Car Is Not Available For Ride For Given Date/Timeslot !!!');
        when others then
            dbms_output.put_line('Ride Transaction Failed !!!');
        
  END INSERT_RIDE_TRANSACTION;

  PROCEDURE UPDATE_RIDE_TRANSACTION(
        vTRANS_ID IN RIDE_TRANSACTION.TRANS_ID%type,
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vSTART_TIME IN RIDE_TRANSACTION.START_TIME%type,
        vEND_TIME IN RIDE_TRANSACTION.END_TIME%type,
        vCAR_ID IN CAR.CAR_ID%type,
        vDISTANCE IN RIDE_TRANSACTION.DISTANCE%type,
        vSTATUS IN RIDE_TRANSACTION.STATUS%type,
        vCUSTOMER_CARD PAYMENTS.CUSTOMER_CARD %type,
        vDISCOUNT_ID DISCOUNTS.DISCOUNT_ID%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.UPDATE_RIDE_TRANSACTION
        ex_INVALID EXCEPTION;
        ex_TRANS_ALREADY_COMPLETED EXCEPTION;
        ex_TRANS_ALREADY_CANCELLED EXCEPTION;
        ex_CAR_NOT_AVAILABLE EXCEPTION;
        ex_TRANS_CANCELLED EXCEPTION;
        ex_INVALID_CUSTOMER_CARD EXCEPTION;
        ex_INVALID_DISCOUNT_ID EXCEPTION;
        
        DB_CARS_AT_PICKUP_ID CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type;
        DB_CAR_ID CAR.CAR_ID%type;
        DB_STATUS RIDE_TRANSACTION.STATUS%type;
        DB_START_TIME RIDE_TRANSACTION.START_TIME%type;
        DB_END_TIME RIDE_TRANSACTION.END_TIME%type;
        DB_vDISCOUNT_ID PAYMENTS.DISCOUNT_ID%TYPE;
        
        PAYMENT_IN_PROCESS PAYMENTS.STATUS%type:= 'IN PROCESS';
    BEGIN
        
        if process_update_ride_transaction(vTRANS_ID, vCARS_AT_PICKUP_ID, vSTART_TIME, vEND_TIME, vCAR_ID, vDISTANCE, vSTATUS) = 'NO' then
            raise ex_INVALID;
        end if;
        
        begin
            select CAR_ID, CARS_AT_PICKUP_ID, STATUS, START_TIME, END_TIME into 
            DB_CAR_ID, DB_CARS_AT_PICKUP_ID, DB_STATUS, DB_START_TIME, DB_END_TIME from RIDE_TRANSACTION where TRANS_ID = vTRANS_ID;
        exception
            when NO_DATA_FOUND then
                raise ex_INVALID;
            when TOO_MANY_ROWS then
                raise ex_INVALID;
            when others then
                raise ex_INVALID;
        end;
        
        -- id trans is completed then dont update
        if DB_STATUS IS NOT NULL and DB_STATUS = 'COMPLETED' then
            raise ex_TRANS_ALREADY_COMPLETED;
        end if;
        
        if DB_STATUS IS NOT NULL and DB_STATUS = 'CANCELLED' then
            raise ex_TRANS_ALREADY_CANCELLED;
        end if;
        
        if vSTATUS = 'CANCELLED' then
            update RIDE_TRANSACTION SET 
                STATUS = vSTATUS
                where TRANS_ID = vTRANS_ID;
            if SQL%ROWCOUNT !=1 then
                rollback;
                raise ex_INVALID;
            end if;
            raise ex_TRANS_CANCELLED;
        elsif vSTATUS = 'UPDATED' then     
            if DB_START_TIME != vSTART_TIME or DB_END_TIME != vEND_TIME or DB_CAR_ID != vCAR_ID or 
                DB_CARS_AT_PICKUP_ID!= vCARS_AT_PICKUP_ID then
                if PCKG_UTILS.CHECK_car_availability(vCAR_ID, vSTART_TIME, vEND_TIME) NOT IN ( vTRANS_ID, 0) then
                    raise ex_CAR_NOT_AVAILABLE;
                else  
                    update RIDE_TRANSACTION SET 
                        CARS_AT_PICKUP_ID = vCARS_AT_PICKUP_ID,
                        TRANSACTION_DATE = sysdate,
                        START_TIME = vSTART_TIME,
                        END_TIME = vEND_TIME,
                        CAR_ID = vCAR_ID,
                        STATUS = vSTATUS
                        where TRANS_ID = vTRANS_ID;
                    
                    if SQL%ROWCOUNT !=1 then
                        rollback;
                        raise ex_INVALID;
                    else
                        dbms_output.put_line('Ride Updated Successfuly');
                    end if;
                end if;
            end if;
        elsif vSTATUS = 'COMPLETED' then
        
            -- First check card details and discount ID then proceed with update
            IF LENGTH(TRIM(vCUSTOMER_CARD)) != 19 or vCUSTOMER_CARD IS NULL then
                raise ex_INVALID_CUSTOMER_CARD;
            END IF;
    
                begin
                    IF LENGTH(TRIM(vDISCOUNT_ID)) > 0 and vDISCOUNT_ID IS NOT NULL then
                        select DISCOUNT_ID into DB_vDISCOUNT_ID from DISCOUNTS where DISCOUNT_ID = vDISCOUNT_ID;
                        if DB_vDISCOUNT_ID IS NULL then
                            raise ex_INVALID_DISCOUNT_ID;
                        end if;
                    end if;
                exception
                    when NO_DATA_FOUND then
                        raise ex_INVALID_DISCOUNT_ID;
                end;
            
            update RIDE_TRANSACTION SET
                STATUS = vSTATUS,
                DISTANCE = vDISTANCE
                where TRANS_ID = vTRANS_ID;
                
            if SQL%ROWCOUNT !=1 then
                rollback;
                raise ex_INVALID;
            else
                dbms_output.put_line('Ride Updated Successfuly');
                dbms_output.put_line('Payment Initiated For Ride ...');
                commit;
            end if;
            
            PROC_INSERT_PAYMENTS(PAY_ID_SEQ.NEXTVAL, sysdate, vCUSTOMER_CARD, PAYMENT_IN_PROCESS, vTRANS_ID, vDISCOUNT_ID);
        
        end if;
    
        commit;
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Update Failed !!!');
        when ex_TRANS_ALREADY_COMPLETED then
            dbms_output.put_line('Transaction Already Completed!!! Update Not Allowed');
        when ex_TRANS_ALREADY_CANCELLED then
            dbms_output.put_line('Transaction Already Cancelled!!! Update Not Allowed');
        when ex_CAR_NOT_AVAILABLE then
            dbms_output.put_line('This Car Not Available For Ride For Given Date/Time !!! Choose Differnet Timeslot');
        when ex_TRANS_CANCELLED then
            dbms_output.put_line('Ride Cancelled Successfuly !!!');
        when ex_INVALID_CUSTOMER_CARD then
            dbms_output.put_line('Customer Card is not valid. Please check valid 16 digit card number !!!');
        when ex_INVALID_DISCOUNT_ID then
            dbms_output.put_line('Discount_ID is not valid. Please check !!!');
        when others then
            dbms_output.put_line('Update Failed !!! Something went wrong');

  END UPDATE_RIDE_TRANSACTION;

  PROCEDURE INSERT_PAYMENT(
        vPAY_ID IN PAYMENTS.PAY_ID%TYPE, 
        vPAY_DATE IN PAYMENTS.PAY_DATE%TYPE, 
        vCUSTOMER_CARD IN PAYMENTS.CUSTOMER_CARD%TYPE, 
        vSTATUS IN PAYMENTS.STATUS%TYPE, 
        vTRANS_ID IN PAYMENTS.TRANS_ID%TYPE, 
        vDISCOUNT_ID IN PAYMENTS.DISCOUNT_ID%TYPE
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.INSERT_PAYMENT
        DB_vRIDE_STATUS RIDE_TRANSACTION.STATUS%TYPE;   
        ex_INVALID_PAYMENT EXCEPTION;
        ex_RIDE_NOT_COMPLETED EXCEPTION;
            
    BEGIN
        
      
        IF PROCESS_PAYMENTS(vPAY_DATE, vCUSTOMER_CARD, vSTATUS, vTRANS_ID, vDISCOUNT_ID) = 'NO' THEN
            raise ex_INVALID_PAYMENT;
        END IF;
        
        begin
            select status into DB_vRIDE_STATUS from ride_transaction where trans_id = vTRANS_ID;
            IF DB_vRIDE_STATUS IS NOT NULL and DB_vRIDE_STATUS != 'COMPLETED' THEN
            raise ex_RIDE_NOT_COMPLETED;
        END IF;
            exception
            when no_data_found then
            raise ex_RIDE_NOT_COMPLETED;
            when others then
            raise ex_RIDE_NOT_COMPLETED;
        end; 
        
        INSERT INTO PAYMENTS VALUES(
            vPAY_ID,
            vPAY_DATE,
            vCUSTOMER_CARD,
            vSTATUS,
            vTRANS_ID,
            vDISCOUNT_ID);
        
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Payment record is not inserted. Please retry with valid constraints !!!');
            ROLLBACK;
        ELSE
            -- change stataus of payment as complete
            PROC_UPDATE_PAYMENTS(vPAY_ID);
        END IF;
        
    EXCEPTION
    
        when ex_INVALID_PAYMENT then
            dbms_output.put_line('Payment transaction has not completed. Please retry  !!!');
        when ex_RIDE_NOT_COMPLETED then
            dbms_output.put_line('Ride transaction has not completed. Cannot be initiated with payments  !!!');
        when others then
            dbms_output.put_line('Payment Failed !!!');

  END INSERT_PAYMENT;

  PROCEDURE UPDATE_PAYMENT(
        vPAY_ID IN PAYMENTS.PAY_ID%TYPE
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.UPDATE_PAYMENT
        ex_UPDATE_FAILED EXCEPTION;
    BEGIN
    
        UPDATE PAYMENTS SET STATUS = 'COMPLETED' WHERE PAY_ID = vPAY_ID;
        IF SQL%ROWCOUNT !=1 THEN
            ROLLBACK;
            raise ex_UPDATE_FAILED;
        ELSE        
            COMMIT;
            dbms_output.put_line('Payment transaction has been completed successfully !!!');
        END IF;
    EXCEPTION
        when ex_UPDATE_FAILED then
            dbms_output.put_line('Payment transaction has not completed. Please retry  !!!');
        when others then
            dbms_output.put_line('Payment Update Failed !!!');

  END UPDATE_PAYMENT;

  PROCEDURE INSERT_DISCOUNT(
        vDISCOUNT_ID IN DISCOUNTS.DISCOUNT_ID%TYPE, 
        vDESCRIPTION IN DISCOUNTS.DESCRIPTION%TYPE, 
        vPERCENTAGE IN DISCOUNTS.PERCENTAGE%TYPE 
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.INSERT_DISCOUNT
        ex_INVALID_DISCOUNT EXCEPTION;
        
    BEGIN
    
        IF PROCESS_DISCOUNTS(vDESCRIPTION, vPERCENTAGE) = 'NO' THEN
            RAISE ex_INVALID_DISCOUNT;
        END IF;
        
        INSERT INTO DISCOUNTS VALUES(
            vDISCOUNT_ID,
            vDESCRIPTION,
            vPERCENTAGE);
        
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Discount record is not inserted. Please retry with valid constraints !!!');
            ROLLBACK;
        ELSE
            dbms_output.put_line('Discount record has been inserted successfully !!!');
            COMMIT;
        END IF;
        
    EXCEPTION
    
        when ex_INVALID_DISCOUNT then
            dbms_output.put_line('Discount record is not inserted. Please retry inserting the Discounts  !!!');
        when others then
            dbms_output.put_line('Discount Failed !!!');

  END INSERT_DISCOUNT;

  PROCEDURE UPDATE_DISCOUNT(
        vDISCOUNT_ID IN DISCOUNTS.DISCOUNT_ID%TYPE, 
        vDESCRIPTION IN DISCOUNTS.DESCRIPTION%TYPE, 
        vPERCENTAGE IN DISCOUNTS.PERCENTAGE%TYPE
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_TRANSACT.UPDATE_DISCOUNT
         ex_INVALID_DISCOUNT EXCEPTION;
    
    BEGIN
    
        IF PROCESS_DISCOUNTS(vDESCRIPTION, vPERCENTAGE) = 'NO' THEN
            RAISE ex_INVALID_DISCOUNT;
        END IF;
    
        UPDATE DISCOUNTS 
        SET DESCRIPTION = vDESCRIPTION, PERCENTAGE =  vPERCENTAGE
        WHERE DISCOUNT_ID = vDISCOUNT_ID;
    
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Discount record is not uodated. Please retry with valid constraints !!!');
            ROLLBACK;
        ELSE
            dbms_output.put_line('Discount record has been updated successfully !!!');
            COMMIT;
        END IF;
    
    EXCEPTION
    
        when ex_INVALID_DISCOUNT then
            dbms_output.put_line('Discount record is not updated. Please retry inserting the Discounts  !!!');
        when others then
            dbms_output.put_line('Discount record is not updated');
 
  END UPDATE_DISCOUNT;

END PCKG_TRANSACT;

/

  GRANT EXECUTE ON "ADMIN"."PCKG_TRANSACT" TO "APP_OWNER";
  GRANT DEBUG ON "ADMIN"."PCKG_TRANSACT" TO "APP_OWNER";
  GRANT EXECUTE ON "ADMIN"."PCKG_TRANSACT" TO "DEVELOPER";
  GRANT DEBUG ON "ADMIN"."PCKG_TRANSACT" TO "DEVELOPER";
  GRANT EXECUTE ON "ADMIN"."PCKG_TRANSACT" TO "TESTER";
  GRANT EXECUTE ON "ADMIN"."PCKG_TRANSACT" TO "SERVICE";
