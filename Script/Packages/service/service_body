--------------------------------------------------------
--  File created - Sunday-December-12-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Package Body PCKG_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ADMIN"."PCKG_SERVICE" AS

    FUNCTION PROCESS_SUPPORT(
        vSUPPORT_ID IN SUPPORT.SUPPORT_ID%type,
        vSTATUS IN SUPPORT.STATUS%type,
        vCUSTOMER_ID IN SUPPORT.CUSTOMER_ID%type,
        vTRANS_ID IN SUPPORT.TRANS_ID%type) 
        
    RETURN VARCHAR2 AS
    
        ex_SUPPORT_ID EXCEPTION;
        ex_STATUS EXCEPTION;
        ex_TRANS_ID EXCEPTION;
        ex_CUSTOMER_ID EXCEPTION;
    
    BEGIN
    
        if vCUSTOMER_ID is not null and vTRANS_ID is not null then
            if CHECK_CUSTOMER_ID_EXISTS(vCUSTOMER_ID) = 0 or CHECK_TRANS_ID_EXISTS(vTRANS_ID) = 0 then
                raise no_data_found;
            end if;
        end if;
    
        if vSUPPORT_ID is null then
            raise ex_SUPPORT_ID;
        end if;
    
        if vSTATUS is null or vSTATUS not in ('IN PROGRESS', 'COMPLETED', 'PENDING') then
            raise ex_STATUS;
        end if;
    
        if vTRANS_ID is null then
            raise ex_TRANS_ID;
        end if;
    
        if vCUSTOMER_ID is null then
            raise ex_CUSTOMER_ID;
        end if;
    
        RETURN 'YES';
    
    EXCEPTION
    
        when no_data_found then
        dbms_output.put_line('Customer Id or Transaction Id not present in the parent table !!!');
        RETURN 'NO';
        when ex_SUPPORT_ID then
        dbms_output.put_line('Support Id cannot be Null !!!');
        RETURN 'NO';
        when ex_STATUS then
        dbms_output.put_line('Invalid Status !!!');
        RETURN 'NO';
        when ex_TRANS_ID then
        dbms_output.put_line('Transaction Id cannot be null !!!');
        RETURN 'NO';
        when ex_CUSTOMER_ID then
        dbms_output.put_line('Customer Id cannot be null !!!');
        RETURN 'NO';
        when others then
        dbms_output.put_line(SQLCODE|| ': ' || SQLERRM);
        RETURN 'NO';      
    
    END PROCESS_SUPPORT;

    FUNCTION PROCESS_FEEDBACK(
        v_RATINGS IN FEEDBACK.RATINGS%TYPE, 
        v_COMMENTS IN FEEDBACK.COMMENTS%TYPE, 
        v_FEEDBACK_DATE IN FEEDBACK.FEEDBACK_DATE%TYPE, 
        v_TRANS_ID IN FEEDBACK.TRANS_ID%TYPE) 
    RETURN VARCHAR2 AS
    
        ex_INVALID_RATINGS EXCEPTION;
        ex_COMMENTS EXCEPTION;
        ex_INVALID_FEEDBACK_DATE EXCEPTION;
        ex_INVALID_TRANS_ID EXCEPTION;
        DB_TRANSACTION_DATE ride_transaction.transaction_date%type;
        INVALID_TRANS_DATE EXCEPTION;
    
    BEGIN
    
        if V_RATINGS is NULL then
            raise ex_INVALID_RATINGS;
        end if;
        
        
        if V_COMMENTS is NULL or LENGTH(trim(V_COMMENTS)) is NULL then
            raise ex_COMMENTS;
        end if;
        
            BEGIN
              SELECT TRANSACTION_DATE INTO DB_TRANSACTION_DATE FROM RIDE_TRANSACTION WHERE TRANS_ID=V_TRANS_ID;
              IF DB_TRANSACTION_DATE IS NULL THEN
                RAISE INVALID_TRANS_DATE;
              END IF;
            
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RAISE ex_INVALID_TRANS_ID;
                WHEN INVALID_TRANS_DATE THEN
                    RAISE INVALID_TRANS_DATE;
            END;
        
        if V_FEEDBACK_DATE > SYSDATE OR  V_FEEDBACK_DATE > DB_TRANSACTION_DATE then
            raise ex_INVALID_FEEDBACK_DATE;
        end if;
        
        if V_TRANS_ID is null then
            raise ex_INVALID_TRANS_ID;
        end if;
        
        RETURN 'YES';
        
    EXCEPTION
    
        when ex_INVALID_RATINGS then
            dbms_output.put_line('Invalid Ratings !!! Ratings Cannot be NULL ');
            RETURN 'NO';
        when ex_COMMENTS then
            dbms_output.put_line('Invalid Comments !!! Comments Cannot be Empty');
            RETURN 'NO';
        when ex_INVALID_FEEDBACK_DATE then
            dbms_output.put_line('Invalid Feedback date !!! Feedback date cannot be greater than sysdate or transaction date');
            RETURN 'NO';
        when ex_INVALID_TRANS_ID then
            dbms_output.put_line('Invalid Trans ID!!! Trans ID Cannot be NULL ');
            RETURN 'NO';
        WHEN INVALID_TRANS_DATE THEN
            dbms_output.put_line('Invalid Trans date!!! Trans date invalid ');
            RETURN 'NO';
        when others then
            RETURN 'NO';
        
    END PROCESS_FEEDBACK;

    PROCEDURE INSERT_SUPPORT(
        vSUPPORT_ID IN SUPPORT.SUPPORT_ID%type,
        vSTATUS IN SUPPORT.STATUS%type,
        vCUSTOMER_ID IN SUPPORT.CUSTOMER_ID%type,
        vTRANS_ID IN SUPPORT.TRANS_ID%type) 
        AS
        ex_INVALID EXCEPTION;
        ex_INVALID_STATUS EXCEPTION;
        
    BEGIN
    
        IF PROCESS_SUPPORT(vSUPPORT_ID, vSTATUS, vCUSTOMER_ID, vTRANS_ID) = 'NO' then
            raise ex_INVALID;
        END IF;
        
        if vSTATUS NOT IN ('COMPLETED', 'IN PROCESS')  then
          raise ex_INVALID_STATUS;
        END IF;
        
        INSERT INTO SUPPORT(SUPPORT_ID, STATUS, CUSTOMER_ID, TRANS_ID)
        VALUES(vSUPPORT_ID, vSTATUS, vCUSTOMER_ID, vTRANS_ID);
        
        IF SQL%ROWCOUNT != 1 then
            dbms_output.put_line('Sorry, Cannot record customers support id !!!');
            rollback;
        ELSE
            COMMIT;
            dbms_output.put_line('Customers Support recorded Added Successfully !!!'); 
        END IF;
    
    EXCEPTION
    
        when ex_INVALID then
            dbms_output.put_line('Inserted Data is not as expected !!!'); 
        WHEN ex_INVALID_STATUS THEN
            dbms_output.put_line('Invalid Status!!!');
        
    END INSERT_SUPPORT;

    PROCEDURE UPDATE_SUPPORT(
        vSUPPORT_ID IN SUPPORT.SUPPORT_ID%type,
        vSTATUS IN SUPPORT.STATUS%type,
        vCUSTOMER_ID IN SUPPORT.CUSTOMER_ID%type,
        vTRANS_ID IN SUPPORT.TRANS_ID%type) 
        AS
        ex_INVALID EXCEPTION;
        ex_INVALID_STATUS EXCEPTION;
            
    BEGIN
    
        IF PROCESS_SUPPORT(vSUPPORT_ID, vSTATUS, vCUSTOMER_ID, vTRANS_ID) = 'NO' then
          raise ex_INVALID;
        END IF;
        
        if vSTATUS NOT IN ('COMPLETED', 'IN PROCESS')  then
          raise ex_INVALID_STATUS;
        END IF;
        
        UPDATE SUPPORT SET STATUS = vSTATUS WHERE SUPPORT_ID = vSUPPORT_ID;
        
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Record not been updated. Please try again !!!');
            rollback;
        ELSE
            dbms_output.put_line('Record has updated successfully !!!');
            commit;
        END IF;
    
    EXCEPTION
    
        WHEN ex_INVALID THEN
            dbms_output.put_line('Status Update has failed. Please try again with valid constraints !!!');        
        WHEN ex_INVALID_STATUS THEN
            dbms_output.put_line('Invalid Status!!!');
        
    END UPDATE_SUPPORT;

    PROCEDURE INSERT_FEEDBACK(
        v_FEEDBACK_ID IN FEEDBACK.FEEDBACK_ID%TYPE, 
        v_RATINGS IN FEEDBACK.RATINGS%TYPE, 
        v_COMMENTS IN FEEDBACK.COMMENTS%TYPE, 
        v_FEEDBACK_DATE IN FEEDBACK.FEEDBACK_DATE%TYPE, 
        v_TRANS_ID IN FEEDBACK.TRANS_ID%TYPE) 
        AS
        ex_INVALID EXCEPTION;
    
    BEGIN
    
        if PROCESS_FEEDBACK( v_RATINGS, v_COMMENTS, v_FEEDBACK_DATE, v_TRANS_ID ) = 'NO' then
            raise ex_INVALID;
        end if;
        
        insert into FEEDBACK values(
            v_FEEDBACK_ID,
            v_RATINGS,
            trim(v_COMMENTS),
            v_FEEDBACK_DATE,
            v_TRANS_ID
        );
        
        if SQL%ROWCOUNT != 1 then
            rollback;
            raise ex_INVALID;
        else 
            dbms_output.put_line('Feedback Data Added Successfully');
            commit;
        end if;
    
    
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Feedback Data Could Not Be Inserted !!!');
        
    END INSERT_FEEDBACK;

END PCKG_SERVICE;

/
