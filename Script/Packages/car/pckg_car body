--------------------------------------------------------
--  File created - Sunday-December-12-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Package Body PCKG_CAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ADMIN"."PCKG_CAR" AS

  FUNCTION PROCESS_CAR(
        vCAR_TYPE IN CAR.CAR_TYPE%type,
        vMAX_PERSON IN CAR.MAX_PERSON%type,
        vRATE_PER_HR IN CAR.RATE_PER_HR %type,
        vMODEL IN CAR.MODEL%type,
        vCAR_MAKE IN CAR.CAR_MAKE%type,
        vCAR_NUMBER IN CAR.CAR_NUMBER%type,
        vCAR_COST IN CAR.CAR_COST%type 
    ) RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_CAR.PROCESS_CAR
        ex_INVALID_CAR_TYPE EXCEPTION;
        ex_MAX_PERSON EXCEPTION;
        ex_RATE_PER_HR EXCEPTION;
        ex_MODEL EXCEPTION;
        ex_CAR_MAKE EXCEPTION;
        ex_CAR_NUMBER EXCEPTION;
        ex_COST EXCEPTION;
        ex_DUPLICATE_CAR_NUMBER EXCEPTION;
        
        db_CAR_NUMBER CAR.CAR_NUMBER%type;
        
    BEGIN
        
        if vCAR_TYPE is NULL or LENGTH(trim(vCAR_TYPE)) IS NULL then
            raise ex_INVALID_CAR_TYPE;
        end if;
        
        if vMAX_PERSON = 0 then
            raise ex_MAX_PERSON;
        end if;
        
        if vRATE_PER_HR = 0 then
            raise ex_RATE_PER_HR;
        end if;
        
        if vMODEL is NULL or LENGTH(trim(vMODEL)) is NULL then
            raise ex_MODEL;
        end if;
        
        if vCAR_MAKE is NULL or LENGTH(trim(vCAR_MAKE)) is NULL then 
            raise ex_CAR_MAKE;
        end if;
        
        if vCAR_NUMBER is NULL or LENGTH(trim(vCAR_NUMBER)) is NULL then 
            raise ex_CAR_NUMBER;
        end if;
        
        if vCAR_COST = 0 then
            raise ex_COST;
        end if;
        
        begin
             select CAR_NUMBER into db_CAR_NUMBER from CAR where CAR_NUMBER = vCAR_NUMBER;
             if db_CAR_NUMBER is NOT NULL then
                raise ex_DUPLICATE_CAR_NUMBER;
            end if;
        exception
            when ex_DUPLICATE_CAR_NUMBER then
                raise ex_DUPLICATE_CAR_NUMBER;
            when NO_DATA_FOUND then
                return 'YES';
        end;
        
        RETURN 'YES';
    EXCEPTION
        when ex_INVALID_CAR_TYPE then
            dbms_output.put_line('Invalid Car Type !!! Car Type Cannot be NULL or Empty');
            RETURN 'NO';
        when ex_MAX_PERSON then
            dbms_output.put_line('Invalid Max Person !!! Max Count Cannot be Zero');
            RETURN 'NO';
        when ex_RATE_PER_HR then
            dbms_output.put_line('Invalid Rate Per Hour !!! Rate Per Hour Cannot be Zero');
            RETURN 'NO';
        when ex_MODEL then
            dbms_output.put_line('Invalid Car Model !!! Car Model Cannot be NULL or Empty');
            RETURN 'NO';
        when ex_CAR_NUMBER then
            dbms_output.put_line('Invalid Car Number !!! Car Number Cannot be NULL or Empty');
            RETURN 'NO';
        when ex_COST then
            dbms_output.put_line('Invalid Car Cost !!! Car Cost Cannot Be Zero');
            RETURN 'NO';
        when ex_DUPLICATE_CAR_NUMBER then
            dbms_output.put_line('Duplicate Car Number Found !!!!');
            RETURN 'NO';
        when others then
            RETURN 'NO';
  END PROCESS_CAR;

  FUNCTION PROCESS_CARS_AT_PICKUP
    (
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vPICKUP_POINT_ID IN CARS_AT_PICKUP.PICKUP_POINT_ID%type,
        vCAR_ID IN CARS_AT_PICKUP.CAR_ID%type
    ) RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_CAR.PROCESS_CARS_AT_PICKUP
        ex_vCARS_AT_PICKUP_ID EXCEPTION;
        ex_vPICKUP_POINT_ID EXCEPTION;
        ex_vCAR_ID EXCEPTION;
        ex_duplicate_car EXCEPTION;
    BEGIN
     
        if vCAR_ID is not null and vPICKUP_POINT_ID is not null then
            if CHECK_CAR_ID_EXISTS(vCAR_ID) = 0 or CHECK_CAR_AT_PICKUP_ID_EXISTS(vCARS_AT_PICKUP_ID) = 0 then
                raise no_data_found;
            end if;
        end if;
            
        if check_car_at_pickup_exists(vCAR_ID) != 0 then
            raise ex_duplicate_car;
        end if;
        
        if vCARS_AT_PICKUP_ID is null then
            raise ex_vCARS_AT_PICKUP_ID;
        end if;
    
        if vPICKUP_POINT_ID is null then
            raise ex_vPICKUP_POINT_ID;
        end if;
    
        if vCAR_ID is null then
            raise ex_vCAR_ID;
        end if;
    
        RETURN 'YES';
    
    EXCEPTION
        when no_data_found then
        dbms_output.put_line('Either PICKUP_POINT_ID or CAR_ID is not present in the parent table !!!');
        RETURN 'NO';
        when ex_vCARS_AT_PICKUP_ID then
        dbms_output.put_line('Car at Pickup ID cannot be Null or is Invalid !!!');
        RETURN 'NO';
        when ex_vPICKUP_POINT_ID then
        dbms_output.put_line('Pickup Point ID cannot be Null or is Invalid !!!');
        RETURN 'NO';
        when ex_vCAR_ID then
        dbms_output.put_line('Car ID cannot be Null or is Invalid !!!');
        RETURN 'NO';
        when ex_duplicate_car then
        dbms_output.put_line('Car Already Exist At Other Pickup Point !!!');
        when others then
        dbms_output.put_line(SQLCODE|| ': ' || SQLERRM);
        RETURN 'NO';        

  END PROCESS_CARS_AT_PICKUP;

  FUNCTION PROCESS_MAINTENANCE(
        vSUMMARY IN MAINTENANCE.SUMMARY%TYPE, 
        vMAINTENANCE_DATE IN MAINTENANCE.MAINTENANCE_DATE%TYPE, 
        vMAINTENANCE_COST IN MAINTENANCE.MAINTENANCE_COST%TYPE, 
        vCAR_ID IN MAINTENANCE.CAR_ID%TYPE, 
        vPURCHASE_INSURANCE_ID IN MAINTENANCE.PURCHASE_INSURANCE_ID%TYPE
    ) RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_CAR.PROCESS_MAINTENANCE

        DB_vPURCHASE_INSURANCE_ID MAINTENANCE.PURCHASE_INSURANCE_ID%TYPE;
    
        ex_INVALID_SUMMARY EXCEPTION;
        ex_INVALID_MAINTENANCE_DATE EXCEPTION;
        ex_INVALID_MAINTENANCE_COST EXCEPTION;
        ex_INVALID_CAR_ID EXCEPTION;
        ex_INVALID_PURCHASE_INSURANCE_ID EXCEPTION;
         
        
    BEGIN
    
        --check if data is null, empty and not appropriate---
        if LENGTH(trim(vSUMMARY)) > 50 then
            raise ex_INVALID_SUMMARY;
        end if;
        
        if vMAINTENANCE_DATE is NULL or to_char(LENGTH(vMAINTENANCE_DATE)) is NULL then
            raise ex_INVALID_MAINTENANCE_DATE;
        end if;
        
        if vMAINTENANCE_COST is NULL or LENGTH(vMAINTENANCE_COST) is NULL then
            raise ex_INVALID_MAINTENANCE_COST;
        end if;
        
        if vCAR_ID is NULL or LENGTH(vCAR_ID) is NULL then
            raise ex_INVALID_CAR_ID;
        end if;
        
        if vPURCHASE_INSURANCE_ID is NULL or LENGTH(vPURCHASE_INSURANCE_ID) is NULL then
            raise ex_INVALID_PURCHASE_INSURANCE_ID;
        end if;
        
        --check if CAR ID exists in the Car table
        if check_car_id_exists(vCAR_ID) = 0 then
            dbms_output.put_line('CAR ID does not exists in CAR table !!!');
            raise ex_INVALID_CAR_ID;
            return 'NO';
        end if;
        
        --check if PURCHASE_INSURANCE_ID exists in the Purchase Insurance table
            begin
                select PURCHASE_INSURANCE_ID into DB_vPURCHASE_INSURANCE_ID from PURCHASE_INSURANCE where PURCHASE_INSURANCE_ID = vPURCHASE_INSURANCE_ID;
                if DB_vPURCHASE_INSURANCE_ID IS NULL OR LENGTH(DB_vPURCHASE_INSURANCE_ID) IS NULL THEN
                    raise ex_INVALID_PURCHASE_INSURANCE_ID;
                end if;
            exception
                when NO_DATA_FOUND then
                    dbms_output.put_line('Purchase Insurance ID does not exists in Insurance table !!!');
                RETURN 'NO';
            end;
        
        RETURN 'YES';
    
    EXCEPTION
    
        when ex_INVALID_SUMMARY then
            dbms_output.put_line('Please enter valid Summary within 50 characters !!!');
        
        when ex_INVALID_MAINTENANCE_DATE then
            dbms_output.put_line('Please enter the Maintenance Date !!!');
            
        when ex_INVALID_MAINTENANCE_COST then
            dbms_output.put_line('Please enter the Maintenance Cost !!!');
        
        when ex_INVALID_CAR_ID then
            dbms_output.put_line('Please enter the Car ID !!!');
            
        when ex_INVALID_PURCHASE_INSURANCE_ID then
            dbms_output.put_line('Please enter the Purchase Insurance ID !!!');
        
        RETURN 'NO';

  END PROCESS_MAINTENANCE;

  FUNCTION PROCESS_PICKUP_POINTS
    (
        vSTATE IN PICKUP_POINTS.STATE%type,
        vCITY IN PICKUP_POINTS.CITY%type,
        vZIP IN PICKUP_POINTS.ZIP%type,
        vCOST IN PICKUP_POINTS.COST%type,
        vNAME IN PICKUP_POINTS.NAME%type
    ) RETURN VARCHAR2 AS

    -- TODO: Implementation required for FUNCTION PCKG_CAR.PROCESS_PICKUP_POINTS
        ex_STATE EXCEPTION;
        ex_CITY EXCEPTION;
        ex_ZIP EXCEPTION;
        ex_NAME EXCEPTION;
        ex_COST EXCEPTION;
    
    BEGIN
    
        if vSTATE is null then
            raise ex_STATE;
        end if;
    
        if vCITY is null then
            raise ex_CITY;
        end if;
    
        if vZIP is null then
            raise ex_ZIP;
        end if;
        
        if vCOST is null then
            raise ex_NAME;
        end if;
        
        if vNAME is null then
            raise ex_NAME;
        end if;
    
        RETURN 'YES';
    
    EXCEPTION
    
        when ex_STATE then
        dbms_output.put_line('State cannot be left blank !!!');
        RETURN 'NO';
        when ex_CITY then
        dbms_output.put_line('City cannot be null !!!');
        RETURN 'NO';
        when ex_ZIP then
        dbms_output.put_line('Zip cannot be null!!!');
        RETURN 'NO';
        when ex_NAME then
        dbms_output.put_line('Name cannot be null !!!');
        RETURN 'NO';
        
        when ex_COST then
        dbms_output.put_line('Cost cannot be null !!!');
        RETURN 'NO';   
        
        when others then
        dbms_output.put_line(SQLCODE|| ': ' || SQLERRM);
        RETURN 'NO';        

  END PROCESS_PICKUP_POINTS;

  PROCEDURE INSERT_CAR(
        vCAR_ID IN CAR.CAR_ID%type,
        vCAR_TYPE IN CAR.CAR_TYPE%type,
        vMAX_PERSON IN CAR.MAX_PERSON%type,
        vRATE_PER_HR IN CAR.RATE_PER_HR %type,
        vMODEL IN CAR.MODEL%type,
        vCAR_MAKE IN CAR.CAR_MAKE%type,
        vCAR_NUMBER IN CAR.CAR_NUMBER%type,
        vCAR_COST IN CAR.CAR_COST%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.INSERT_CAR
        ex_INVALID EXCEPTION;
    BEGIN
        if PROCESS_CAR(vCAR_TYPE, vMAX_PERSON, vRATE_PER_HR, vMODEL, vCAR_MAKE, vCAR_NUMBER, vCAR_COST) = 'NO' then
            raise ex_INVALID;
        end if;
        
        insert into CAR values(
            vCAR_ID,
            trim(vCAR_TYPE),
            vMAX_PERSON,
            vRATE_PER_HR,
            trim(vMODEL),
            trim(vCAR_MAKE),
            trim(vCAR_NUMBER),
            vCAR_COST
        );
        
        if SQL%ROWCOUNT != 1 then
            raise ex_INVALID;
        else 
            dbms_output.put_line('Car Data Added Successfully');
        end if;
    
        commit;
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Car Data Could Not Be Inserted !!!');
        rollback;
  END INSERT_CAR;

  PROCEDURE UPDATE_CAR(
        vCAR_ID IN CAR.CAR_ID%type,
        vCAR_TYPE IN CAR.CAR_TYPE%type,
        vMAX_PERSON IN CAR.MAX_PERSON%type,
        vRATE_PER_HR IN CAR.RATE_PER_HR %type,
        vMODEL IN CAR.MODEL%type,
        vCAR_MAKE IN CAR.CAR_MAKE%type,
        vCAR_NUMBER IN CAR.CAR_NUMBER%type,
        vCAR_COST IN CAR.CAR_COST%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.UPDATE_CAR
            ex_INVALID EXCEPTION;
    BEGIN
    
        if PROCESS_CAR(vCAR_TYPE, vMAX_PERSON, vRATE_PER_HR, vMODEL, vCAR_MAKE, vCAR_NUMBER, vCAR_COST) = 'NO' then
            raise ex_INVALID;
        end if;
        
        UPDATE CAR SET CAR_TYPE = vCAR_TYPE, MAX_PERSON = vMAX_PERSON, RATE_PER_HR = vRATE_PER_HR,MODEL= vMODEL ,CAR_MAKE=vCAR_MAKE ,CAR_NUMBER=vCAR_NUMBER,CAR_COST=vCAR_COST WHERE CAR_ID = vCAR_ID;
        
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Record not been updated. Please try again !!!');
            rollback;
        ELSE
            dbms_output.put_line('Record has updated successfully !!!');
            commit;
        END IF;
    
    EXCEPTION
    
        WHEN ex_INVALID THEN
            dbms_output.put_line('Car Update has been failed. Please try again with valid constraints !!!');

  END UPDATE_CAR;

  PROCEDURE INSERT_PICKUP_POINT(
        vPICKUP_POINT_ID IN PICKUP_POINTS.PICKUP_POINT_ID%type,
        vSTATE IN PICKUP_POINTS.STATE%type,
        vCITY IN PICKUP_POINTS.CITY%type,
        vZIP IN PICKUP_POINTS.ZIP%type,
        vCOST IN PICKUP_POINTS.COST%type,
        vNAME IN PICKUP_POINTS.NAME%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.INSERT_PICKUP_POINT
        ex_INVALID EXCEPTION;
    
    BEGIN
    
        IF PROCESS_PICKUP_POINTS(trim(vSTATE),trim(vCITY),trim(vZIP),vCOST,trim(vNAME)) = 'NO' then
            raise ex_INVALID;
        END IF;
    
        INSERT INTO PICKUP_POINTS(PICKUP_POINT_ID, STATE, CITY, ZIP, COST, NAME)
        VALUES(
            vPICKUP_POINT_ID,
            trim(vSTATE),
            trim(vCITY),
            trim(vZIP),
            vCOST,
            trim(vNAME));
    
        IF SQL%ROWCOUNT != 1 then
            dbms_output.put_line('Sorry, Pickup Point could not be added !!!');
            rollback;
        ELSE
            COMMIT;
            dbms_output.put_line('Pickup Point Added Successfully !!!'); 
        END IF;
    
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Inserted Data is not as expected !!!'); 

  END INSERT_PICKUP_POINT;

  PROCEDURE UPDATE_PICKUP_POINT(
        vPICKUP_POINT_ID IN PICKUP_POINTS.PICKUP_POINT_ID%TYPE, 
        vSTATE IN PICKUP_POINTS.STATE%TYPE,  
        vCITY IN PICKUP_POINTS.CITY%TYPE, 
        vZIP IN PICKUP_POINTS.ZIP%TYPE, 
        vCOST IN PICKUP_POINTS.COST%TYPE, 
        vNAME IN PICKUP_POINTS.NAME%TYPE
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.UPDATE_PICKUP_POINT
        ex_INVALID EXCEPTION;
        
    BEGIN
    
        IF PROCESS_PICKUP_POINTS(vSTATE,vCITY,vZIP,vCOST,vNAME) = 'NO' THEN
            RAISE ex_INVALID;
        END IF;
        
        UPDATE PICKUP_POINTS SET STATE = vSTATE, CITY = vCITY, ZIP = vZIP, COST = vCOST, NAME = vNAME WHERE PICKUP_POINT_ID = vPICKUP_POINT_ID;
        
        IF SQL%ROWCOUNT !=1 THEN
            dbms_output.put_line('Record not been updated. Please try again !!!');
            rollback;
        ELSE
            dbms_output.put_line('Record has updated successfully !!!');
            commit;
        END IF;
        
    EXCEPTION
    
        when ex_INVALID then
            dbms_output.put_line('Record not been updated. Please try again !!!');

  END UPDATE_PICKUP_POINT;

  PROCEDURE INSERT_CARS_AT_PICKUP(
        vCARS_AT_PICKUP_ID IN CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vPICKUP_POINT_ID IN CARS_AT_PICKUP.PICKUP_POINT_ID%type,
        vCAR_ID IN CARS_AT_PICKUP.CAR_ID%type
    ) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PCKG_CAR.INSERT_CARS_AT_PICKUP
    NULL;
  END INSERT_CARS_AT_PICKUP;

  PROCEDURE UPDATE_CARS_AT_PICKUP(
        vCARS_AT_PICKUP_ID CARS_AT_PICKUP.CARS_AT_PICKUP_ID%type,
        vPICKUP_POINT_ID PICKUP_POINTS.PICKUP_POINT_ID%type,
        vCAR_ID CAR.CAR_ID%type
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.UPDATE_CARS_AT_PICKUP
        ex_INVALID EXCEPTION;
    
    BEGIN
    
        IF PROCESS_CARS_AT_PICKUP(vCARS_AT_PICKUP_ID,vPICKUP_POINT_ID,vCAR_ID) = 'NO' then
            raise ex_INVALID;
        END IF;
    
        INSERT INTO CARS_AT_PICKUP(CARS_AT_PICKUP_ID, PICKUP_POINT_ID, CAR_ID)
        VALUES(
            vCARS_AT_PICKUP_ID,
            vPICKUP_POINT_ID,
            vCAR_ID);
    
        IF SQL%ROWCOUNT != 1 then
            dbms_output.put_line('Sorry, Invalid CARS_AT_PICKUP_ID !!!');
            rollback;
        ELSE
            COMMIT;
            dbms_output.put_line('CARS_AT_PICKUP_ID Added Successfully !!!'); 
        END IF;
    
    EXCEPTION
        when ex_INVALID then
            dbms_output.put_line('Inserted Data is not as expected !!!'); 

  END UPDATE_CARS_AT_PICKUP;

  PROCEDURE INSERT_MAINTENANCE(
        vMAINTENANCE_ID IN MAINTENANCE.MAINTENANCE_ID%TYPE, 
        vSUMMARY IN MAINTENANCE.SUMMARY%TYPE, 
        vMAINTENANCE_DATE IN MAINTENANCE.MAINTENANCE_DATE%TYPE, 
        vMAINTENANCE_COST IN MAINTENANCE.MAINTENANCE_COST%TYPE, 
        vCAR_ID IN MAINTENANCE.CAR_ID%TYPE, 
        vPURCHASE_INSURANCE_ID IN MAINTENANCE.PURCHASE_INSURANCE_ID%TYPE
    ) AS

    -- TODO: Implementation required for PROCEDURE PCKG_CAR.INSERT_MAINTENANCE
        ex_INVALID EXCEPTION;
            
    BEGIN
    
        IF PROCESS_MAINTENANCE(vSUMMARY, vMAINTENANCE_DATE, vMAINTENANCE_COST, vCAR_ID, vPURCHASE_INSURANCE_ID) = 'NO' THEN
            raise ex_INVALID;
        END IF;
        
        INSERT INTO MAINTENANCE VALUES(
            vMAINTENANCE_ID,
            vSUMMARY,
            vMAINTENANCE_DATE,
            vMAINTENANCE_COST,
            vCAR_ID,
            vPURCHASE_INSURANCE_ID);
            
        IF SQL%ROWCOUNT != 1 then
            dbms_output.put_line('Sorry, Maintenance record could not be inserted !!!');
            rollback;
        ELSE
            COMMIT;
            dbms_output.put_line('Maintenance Inserted Successfully !!!'); 
        END IF;
    
    EXCEPTION
    
        when ex_INVALID then
            dbms_output.put_line('Please retry inserting the valid Maintenance !!!');

  END INSERT_MAINTENANCE;

END PCKG_CAR;

/
