
/******************************************

!!! Do NOT Remove Commented Code from this File !!!

*******************************************/


SELECT * FROM USER_SEQUENCES;

SELECT CUST_ID_SEQ.CURRVAL FROM DUAL;
SELECT ADDRESS_ID_SEQ.CURRVAL FROM DUAL;
SELECT ACTIVITY_ID_SEQ.CURRVAL FROM DUAL;

SELECT RECORD_ID_SEQ.CURRVAL from dual;


/* 
CREATE SEQUENCE ADDRESS_ID_SEQ
     START WITH 11111
     INCREMENT BY 1
     ORDER;
*/

-- drop sequence CUST_ID_SEQ;
-- drop sequence CUST_ID_FOR_ADDR_SEQ;

/*CREATE SEQUENCE CUST_ID_SEQ
     START WITH 1001
     INCREMENT BY 1
     ORDER;
*/

/*CREATE SEQUENCE CUST_ID_FOR_ADDR_SEQ
     START WITH 1001
     INCREMENT BY 1
     ORDER;
*/

-- Insert Customers from Mocktable

/*INSERT INTO CUSTOMERS (CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL_ID, CONTACT, LICENSE_NUMBER, PASSPORT_NUMBER, CUSTOMER_TYPE)
select CUST_ID_SEQ.NEXTVAL, first_name, last_name, email_id, 
decode(length(to_number(SUBSTR(replace(contact,'-',''), -10))),9,CONTACT_9.NEXTVAL,8,CONTACT_9.NEXTVAL,7,CONTACT_9.NEXTVAL, 6,CONTACT_9.NEXTVAL, to_number(SUBSTR(replace(contact,'-',''), -10))) as CONTACT, 
license_number, passport_number, decode(customer_type,'True','STUDENT','EMPLOYEE') as CUSTOMER_TYPE
from MOCKDATA 
;*/

select * from customers;

-- Insert Customers Address from MockAddr

/*
INSERT INTO customer_address (ADDRESS_ID, ADDRESS_LINE1, ADDRESS_LINE2, CITY_STATE, CITY, CUSTOMER_ID, ZIP_CODE, ADDRESS_TYPE)
select  ADDRESS_ID_SEQ.NEXTVAL, ADDRESS_LINE1, ADDRESS_LINE2 , CITY_STATE, CITY, 
CUST_ID_FOR_ADDR_SEQ.NEXTVAL, SUBSTR(ZIP_CODE, -6) as ZIPCODE,
decode(ADDRESS_TYPE, 'False','HOME','True','OFFICE') as ADDRESS_TYPE 
from MOCKADDR;
*/


-- This test should return 10k records
/* 
select count(*) 
from CUSTOMERS, CUSTOMER_ADDRESS
where CUSTOMERS.CUSTOMER_ID = CUSTOMER_ADDRESS.CUSTOMER_ID;
*/



/* select first_name, last_name, email_id, 
decode(length(to_number(SUBSTR(replace(contact,'-',''), -10))),9,6123456789,8,6666123456,7,6666123456, to_number(SUBSTR(replace(contact,'-',''), -10))) as CONTACT, 
license_number, passport_number, decode(customer_type,'True','Student','Employee')
from mockdata; */

update car set MAX_PERSON = 5 where CAR_ID = 2005;

--select to_char(login_time,'DD/MON/YYYY HH:MI AM') from MOCKDATA;

/*
CREATE SEQUENCE CUST_ID_FOR_ACT
     START WITH 1001
     INCREMENT BY 1
     ORDER;
*/

--drop SEQUENCE CUST_ID_FOR_ACT;

-- select to_char(LOGIN_TIME,'DD/MON/YYYY HH:MI AM') as LOGIN_TIME, to_char((LOGIN_TIME + 1/24),'DD/MON/YYYY HH:MI AM') as LOGOUT_TIME from MOCKDATA;
/*
INSERT INTO ACTIVITY (ACTIVITY_ID, LOGIN_TIME, LOGOUT_TIME, CUSTOMER_ID)
select ACTIVITY_ID_SEQ.NEXTVAL, LOGIN_TIME, (LOGIN_TIME + 1/24) as LOGOUT_TIME, CUST_ID_FOR_ACT.nextval 
from MOCKDATA;
*/

select count(*) from MOCKDATA;

/*
INSERT INTO VIOLATIONS_RECORDS
select RECORD_ID_SEQ.NEXTVAL, p.RECORD_DATE, CUST_ID_TEMP.NEXTVAL, e.VIOLATION_ID
from  
(SELECT VIOLATION_ID
FROM   (
    SELECT VIOLATION_ID
    FROM   VIOLATIONS
    ORDER BY DBMS_RANDOM.RANDOM)
WHERE  rownum < 15) e,
(SELECT RECORD_DATE
FROM   (
    SELECT add_months(LOGIN_TIME,1) as RECORD_DATE
    FROM   ACTIVITY
    ORDER BY DBMS_RANDOM.RANDOM)
WHERE  rownum < 107) p;
*/

--create table temp(CUSTOMER_ID NUMBER(25));

/*
DROP SEQUENCE CUST_ID_TEMP;
DROP SEQUENCE RECORD_ID_SEQ;

CREATE SEQUENCE RECORD_ID_SEQ
     START WITH 101
     INCREMENT BY 1
     ORDER;

CREATE SEQUENCE CUST_ID_TEMP
     START WITH 2001
     INCREMENT BY 6
     ORDER;
*/

--select count(*) from VIOLATIONS_RECORDS;
--select DISTINCT violation_id from VIOLATIONS_RECORDS;

/*

------ PURCHASE_INSURANCE TABLE ------- 

CREATE TABLE MOCK_INSURANCE(
    DATE_PURCHASE DATE);

CREATE SEQUENCE PURCHASE_INSURANCE_ID_SEQ
START WITH 1
INCREMENT BY 1
ORDER;

CREATE SEQUENCE INSURANCE_CAR_ID_SEQ
START WITH 1001
INCREMENT BY 1
ORDER;

INSERT INTO PURCHASE_INSURANCE
SELECT PURCHASE_INSURANCE_ID_SEQ.NEXTVAL, INSURANCE_CAR_ID_SEQ.NEXTVAL, e.INSURANCE_ID, p.DATE_PURCHASE AS PURCHASE_DATE, ADD_MONTHS(p.DATE_PURCHASE, 60) AS EXPIRY_DATE
FROM
(SELECT INSURANCE_ID FROM INSURANCE ORDER BY DBMS_RANDOM.RANDOM) e,
(SELECT DATE_PURCHASE FROM (SELECT DATE_PURCHASE FROM MOCK_INSURANCE) WHERE ROWNUM < 11) p;


SELECT PURCHASE_INSURANCE_ID_SEQ.CURRVAL FROM DUAL;
SELECT INSURANCE_CAR_ID_SEQ.CURRVAL FROM DUAL;
*/

/*
CREATE SEQUENCE CARS_AT_PICKUP_ID_SEQ
     START WITH 9000
     INCREMENT BY 1
     ORDER;

CREATE SEQUENCE PICKUP_POINT_ID_MAP
     START WITH 7000
     INCREMENT BY 1
     ORDER;

CREATE SEQUENCE CAR_ID_MAP
     START WITH 1001
     INCREMENT BY 1
     ORDER;
*/

-- drop sequence PICKUP_POINT_ID_MAP;

-- INSERT INTO CARS_AT_PICKUP VALUES(CARS_AT_PICKUP_ID_SEQ.NEXTVAL, PICKUP_POINT_ID_MAP.NEXTVAL,CAR_ID_MAP.NEXTVAL);

-- SELECT CAR_ID_MAP.CURRVAL from dual;


select * from user_sequences;

/*
CREATE SEQUENCE MAINTENANCE_ID_SEQ
     START WITH 5000
     INCREMENT BY 1
     ORDER;
     
CREATE SEQUENCE CAR_ID_TEMP
     START WITH 1001
     INCREMENT BY 1
     ORDER;
     
CREATE SEQUENCE PURCHASE_INSURANCE_ID_TEMP
     START WITH 1
     INCREMENT BY 1
     ORDER;

drop sequence CAR_ID_TEMP;
drop sequence PURCHASE_INSURANCE_ID_TEMP;
drop sequence MAINTENANCE_ID_SEQ;
     
INSERT INTO MAINTENANCE
select MAINTENANCE_ID_SEQ.NEXTVAL, SUMMARY, MAINTENANCE_DATE, MAINTENANCE_COST, CAR_ID_TEMP.NEXTVAL, PURCHASE_INSURANCE_ID_TEMP.NEXTVAL 
from (select summary, MAINTENANCE_DATE, MAINTENANCE_COST from MOCKDATA order by MAINTENANCE_COST) where MAINTENANCE_COST >= 3374;

select MAINTENANCE_ID_SEQ.CURRVAL from dual;
*/


-- RIDE TRANSACTION 

CREATE SEQUENCE TRANS_ID_SEQ
     START WITH 501
     INCREMENT BY 1
     ORDER;
     
CREATE SEQUENCE TEMP_CUST_ID
     START WITH 1001
     INCREMENT BY 1
     CYCLE
     ORDER;

CREATE SEQUENCE TEMP_CARS_AT_PICKUP_ID
     START WITH 9001
     INCREMENT BY 1
     CYCLE
     ORDER;


-- INSERT INTO RIDE_TRANSACTION
/*
select count(*)
from  
(SELECT VIOLATION_ID
FROM   (
    SELECT VIOLATION_ID
    FROM   VIOLATIONS
    ORDER BY DBMS_RANDOM.RANDOM)
WHERE  rownum < 15) e,
(SELECT RECORD_DATE
FROM   (
    SELECT add_months(LOGIN_TIME,1) as RECORD_DATE
    FROM   ACTIVITY
    ORDER BY DBMS_RANDOM.RANDOM)
WHERE  rownum < 107) p where ROWNUM < 500;
*/

select count(*) from MOCKDATA;



select cars_at_pickup_id
from (
select cars_at_pickup_id from cars_at_pickup
order by DBMS_RANDOM.RANDOM);


select CUSTOMER_ID
from (
select CUSTOMER_ID from CUSTOMERS
order by DBMS_RANDOM.RANDOM);


select cars_at_pickup_id, CUSTOMER_ID
from  (
select cars_at_pickup_id, CUSTOMER_ID
from (
select cars_at_pickup_id
from cars_at_pickup
order by DBMS_RANDOM.RANDOM),
(
select CUSTOMER_ID
from CUSTOMERS
order by DBMS_RANDOM.RANDOM ) where ROWNUM < 200
) order by DBMS_RANDOM.RANDOM;

select cars_at_pickup_id, CUSTOMER_ID
from (
select cars_at_pickup_id
from cars_at_pickup
order by DBMS_RANDOM.RANDOM),
(
select CUSTOMER_ID
from CUSTOMERS
order by DBMS_RANDOM.RANDOM) where ROWNUM < 100;


SET SERVEROUTPUT ON;

DECLARE
    CURSOR C1 is select CARS_AT_PICKUP_ID from CARS_AT_PICKUP ;
    CURSOR C2 is select CUSTOMER_ID from CUSTOMERS order by DBMS_RANDOM.RANDOM;
    CURSOR C3 is select START_TIME from MOCKDATA order by DBMS_RANDOM.RANDOM;
    CURSOR C4 is select DISTANCE from MOCKDATA order by DBMS_RANDOM.RANDOM;
    
    TYPE PICKUP IS VARRAY(20000) OF CARS_AT_PICKUP.CARS_AT_PICKUP_ID%TYPE;
    TYPE CUST IS VARRAY(20500) OF CUSTOMERS.CUSTOMER_ID%TYPE;
    TYPE START_TIME_TYPE IS VARRAY(1000000) OF MOCKDATA.START_TIME%TYPE;
    TYPE DISTANCE_TYPE IS VARRAY(1000000) OF MOCKDATA.DISTANCE%TYPE;
    
    PICKUP_ARR PICKUP := PICKUP();
    CUST_ARR CUST := CUST();
    START_TIME_ARR START_TIME_TYPE := START_TIME_TYPE();
    DISTANCE_ARR DISTANCE_TYPE := DISTANCE_TYPE();
     
    PICKUP_INDEX NUMBER := 1;
    CUST_INDEX NUMBER := 1;
    START_TIME_INDEX NUMBER := 1;
    DISTANCE_INDEX NUMBER := 1;
    
    DB_CAR_ID CARS_AT_PICKUP.CAR_ID%TYPE;
    
BEGIN
    for i in C1 loop
        PICKUP_ARR.EXTEND;
        PICKUP_ARR(PICKUP_INDEX) := i.CARS_AT_PICKUP_ID;
        PICKUP_INDEX := PICKUP_INDEX + 1;
    end loop;
    
    for i in C2 loop
        CUST_ARR.EXTEND;
        CUST_ARR(CUST_INDEX) := i.CUSTOMER_ID;
        CUST_INDEX := CUST_INDEX + 1;
    end loop;
    
    for i in C3 loop
        START_TIME_ARR.EXTEND;
        START_TIME_ARR(START_TIME_INDEX) := i.START_TIME;
        START_TIME_INDEX := START_TIME_INDEX + 1;
    end loop;
    
    for i in C4 loop
        DISTANCE_ARR.EXTEND;
        DISTANCE_ARR(DISTANCE_INDEX) := i.DISTANCE;
        DISTANCE_INDEX := DISTANCE_INDEX + 1;
    end loop;
          
    PICKUP_INDEX := 1;
    CUST_INDEX := 1;
    START_TIME_INDEX := 1;
    DISTANCE_INDEX := 1;
    
    for i in 1 .. 25000 loop
    
        if PICKUP_INDEX >= 50 then
            PICKUP_INDEX := 1;
        end if;    
        if CUST_INDEX >= 10000 then
            CUST_INDEX := 1;
        end if;
        
        select CAR_ID into DB_CAR_ID from CARS_AT_PICKUP where CARS_AT_PICKUP_ID = PICKUP_ARR(PICKUP_INDEX);
        
        insert into RIDE_TRANSACTION values (
            TRANS_ID_SEQ.NEXTVAL,
            CUST_ARR(CUST_INDEX),
            PICKUP_ARR(PICKUP_INDEX),
            START_TIME_ARR(START_TIME_INDEX),
            START_TIME_ARR(START_TIME_INDEX) + 2/24,
            START_TIME_ARR(START_TIME_INDEX) + 4/24,
            DB_CAR_ID,
            DISTANCE_ARR(DISTANCE_INDEX),
            'COMPLETED');
        
     /*   dbms_output.put_line(
        TRANS_ID_SEQ.NEXTVAL || ' ' || 
        CUST_ARR(CUST_INDEX) || ' '|| 
        PICKUP_ARR(PICKUP_INDEX) || ' ' || 
        to_char(START_TIME_ARR(START_TIME_INDEX),'DD-MM-YYYY HH:MI:SS') || ' '|| 
        to_char(START_TIME_ARR(START_TIME_INDEX) + 2/24,'DD-MM-YYYY HH:MI:SS') || ' ' || 
        to_char(START_TIME_ARR(START_TIME_INDEX) + 4/24,'DD-MM-YYYY HH:MI:SS') ||' '|| 
        DB_CAR_ID || ' ' || 
        DISTANCE_ARR(DISTANCE_INDEX));
       */ 
        
        PICKUP_INDEX := PICKUP_INDEX + 1;
        CUST_INDEX := CUST_INDEX + 1;
        DISTANCE_INDEX := DISTANCE_INDEX + 1;
        START_TIME_INDEX := START_TIME_INDEX + 1;
    end loop;
    
   -- dbms_output.put_line(to_char(sysdate, 'DD-MON-YYYY HH:MI:SS'));
   -- dbms_output.put_line(to_char(sysdate+1/24, 'DD-MON-YYYY HH:MI:SS')); 
END;

select * from user_sequences;

select TRANS_ID_SEQ.CURRVAL from dual;

/*
DROP SEQUENCE TRANS_ID_SEQ;

CREATE SEQUENCE TRANS_ID_SEQ
 START WITH 101
 INCREMENT BY 1
 ORDER;
 */
 
-- delete from RIDE_TRANSACTION;

select count(*) from RIDE_TRANSACTION;

select car_type, count(car_type) from car where car_id in (select car_id from RIDE_TRANSACTION) group by car_type;

select car.car_type, sum(p.count_trans)/(select count(*) from RIDE_TRANSACTION) *100 || '%' as Average_Rides
from car, (select car_id, count(trans_id) as count_trans from RIDE_TRANSACTION group by car_id) p
where car.car_id = p.car_id
group by car.car_type;


set serveroutput on;

begin
    main();
end;

select decode(trunc((sysdate - DATE_OF_BIRTH)/365),35,'Yes','No') as Result, DATE_OF_BIRTH  from CUSTOMERS where CUSTOMER_ID = 11000;

select * from customers where first_name = 'Vignesh';
begin
update customers set last_name = 'Kumar' where customer_id = 11004;
commit;
end;